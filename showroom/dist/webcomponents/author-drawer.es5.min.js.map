{"version":3,"file":"author-drawer.es5.min.js","sources":["../src/element.js"],"sourcesContent":["class AuthorDrawerElement extends AuthorBaseElement(HTMLElement) {\n  constructor () {\n    super(`{{TEMPLATE-STRING}}`)\n\n    this.UTIL.defineProperties({\n      acceptablePositions: {\n        private: true,\n        readonly: true,\n        default: ['top', 'right', 'bottom', 'left']\n      },\n\n      computedDimension: {\n        private: true,\n        readonly: true,\n        get: () => {\n          let style = window.getComputedStyle(this)\n\n          switch (this.position) {\n            case 'left':\n            case 'right': return style.width\n            default: return style.height\n          }\n        }\n      },\n\n      position: {\n        readonly: true,\n        get: () => {\n          if (!this.hasAttribute('position')) {\n            return 'left'\n          }\n\n          let position = this.getAttribute('position')\n\n          if (!this.PRIVATE.acceptablePositions.includes(position)) {\n            this.UTIL.printToConsole(`Invalid position \"${position}\". Reverting to default \"left\". Acceptable values: ${this.PRIVATE.acceptablePositions.join(', ')}`, 'warning')\n            return 'left'\n          }\n\n          return position\n        }\n      }\n    })\n\n    this.UTIL.definePrivateMethods({\n      open: () => {\n        document.body.style.overflow = 'hidden'\n        this.setAttribute('transition', '')\n        this.emit('open')\n      },\n\n      close: () => {\n        this.emit('close')\n        setTimeout(() => {\n          document.body.style.removeProperty('overflow')\n          this.removeAttribute('transition')\n        }, 382)\n      }\n    })\n\n    this.UTIL.registerListeners(this, {\n      'attribute.change': evt => {\n        let { attribute, oldValue, newValue } = evt.detail\n\n        switch (attribute) {\n          case 'open':\n            if (this.hasAttribute('open')) {\n              return this.PRIVATE.open()\n            }\n\n            return this.PRIVATE.close()\n        }\n      }\n    })\n  }\n\n  static get observedAttributes () {\n    return ['position', 'open']\n  }\n\n  open () {\n    this.setAttribute('open', '')\n  }\n\n  close () {\n    this.removeAttribute('open')\n  }\n}\n\ncustomElements.define('author-drawer', AuthorDrawerElement)\n\nexport default AuthorDrawerElement\n"],"names":["AuthorDrawerElement","UTIL","defineProperties","acceptablePositions","private","readonly","default","computedDimension","get","style","window","getComputedStyle","_this","position","width","height","hasAttribute","getAttribute","PRIVATE","includes","printToConsole","join","definePrivateMethods","open","document","body","overflow","setAttribute","emit","close","setTimeout","removeProperty","removeAttribute","registerListeners","evt","detail","attribute","oldValue","newValue","AuthorBaseElement","HTMLElement","customElements","define"],"mappings":"kxCAAMA,0tDAIGC,KAAKC,iBAAiB,CACzBC,oBAAqB,CACnBC,SAAS,EACTC,UAAU,EACVC,QAAS,CAAC,MAAO,QAAS,SAAU,SAGtCC,kBAAmB,CACjBH,SAAS,EACTC,UAAU,EACVG,IAAK,eACCC,EAAQC,OAAOC,8BAEXC,EAAKC,cACN,WACA,eAAgBJ,EAAMK,qBACXL,EAAMM,UAK5BF,SAAU,CACRR,UAAU,EACVG,IAAK,eACEI,EAAKI,aAAa,kBACd,WAGLH,EAAWD,EAAKK,aAAa,mBAE5BL,EAAKM,QAAQf,oBAAoBgB,SAASN,GAKxCA,KAJAZ,KAAKmB,2CAAoCP,gEAA8DD,EAAKM,QAAQf,oBAAoBkB,KAAK,OAAS,WACpJ,cAQVpB,KAAKqB,qBAAqB,CAC7BC,KAAM,WACJC,SAASC,KAAKhB,MAAMiB,SAAW,WAC1BC,aAAa,aAAc,MAC3BC,KAAK,SAGZC,MAAO,aACAD,KAAK,SACVE,WAAW,WACTN,SAASC,KAAKhB,MAAMsB,eAAe,cAC9BC,gBAAgB,eACpB,UAIF/B,KAAKgC,uBAAwB,oBACZ,SAAAC,SACsBA,EAAIC,OAAtCC,IAAAA,YAAWC,WAAUC,gBAEnBF,OACD,cACCxB,EAAKI,aAAa,QACbJ,EAAKM,QAAQK,OAGfX,EAAKM,QAAQW,oQAtEEU,kBAAkBC,oEA6EzC,CAAC,WAAY,iDAIfb,aAAa,OAAQ,yCAIrBK,gBAAgB,oDAIzBS,eAAeC,OAAO,gBAAiB1C"}